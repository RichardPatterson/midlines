% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/midlines_refine.R
\name{midlines_check}
\alias{midlines_check}
\title{Checks removed midlines to identify wrongly flagged segments}
\usage{
midlines_check(x, n_removed = NULL, length = NULL, border_line = NULL)
}
\arguments{
\item{x}{an sf linestring collection. Intended to be passed from the output of \code{\link{midlines_clean}}}

\item{n_removed}{a contiguous group of removed lines of this number will be un-flagged for removal}

\item{length}{a contiguous group of removed lines of more than length will be un-flagged for removal}

\item{border_line}{an sf linestring forming the exterior border of the area of interest (see below). A contiguous group of removed lines intersecting with this line will be un-flagged for removal}
}
\description{
Polygon midlines estimated by Voronoi tessellation results in extraneous additional lines which need to be removed. Following the flagging of extraneous lines using \code{\link{midlines_clean}}, this function can be used to filter extraneous lines from those wrongly flagged.
}
\details{
Intended to take the output of \code{\link{midlines_clean}}, this function will use three criteria to identify lines flagged for removal which might form part of the intended midlines. If n_removed corresponds to the parameter of \code{\link{midlines_clean}} of the same name, it will identify lines forming a contiguous group of >=n_removed, i.e. sequential removal of end lines did not result in meeting another branch in the line. Removed based on length is grounded in extraneous lines often being very short and complicated geometries. Contiguous groups of lines longer than the specified length will be un-flagged for removal. The appropriate length will depend on the distance between points on the polygon used to generate the midlines, which in turn can be manipulated with the dfMaxLength option of \code{\link{midlines_draw}}. Trial and error may be required to identify the optimal lengths. border_line can be used, as with \code{\link{midlines_draw}} and \code{\link{midlines_clean}} to ensure that any lines which formed a contiguous group intersecting the specified border_line will be un-flagged for removal.
}
\examples{
library(sf)
p1 = st_buffer(st_linestring(matrix(c(0,0,30,0),ncol=2, byrow=TRUE) ),0.75)
plot(p1)
p2 = st_buffer(st_linestring(matrix(c(9,5,9,0,20,0,18,-4),ncol=2, byrow=TRUE) ),0.75)
plot(p2, add = TRUE)
p3 = st_union(p1, p2)
plot(p3, col = "GRAY")

ml = midlines_draw(p3, dfMaxLength = 1)
plot(ml$geometry, add = TRUE)

ml_clean = midlines_clean(ml, n_removed = 15)
plot(ml_clean$geometry, col = ml_clean$removed_flag, add = TRUE)

ml_check = midlines_check(ml_clean, n_removed = 10)
plot(p3, col = "GRAY")
plot(ml_check$geometry, col = ml_check$removed_flag2, add = TRUE)

ml_check2 = midlines_check(ml_clean, length = 5)
plot(p3, col = "GRAY")
plot(ml_check2$geometry, col = ml_check2$removed_flag2, add = TRUE)

bbox_as_line = st_cast(st_as_sfc(st_bbox
  (c(xmin = 0, xmax = 30, ymax = -10, ymin = 10))),"LINESTRING")
plot(bbox_as_line, add = TRUE)

ml_check3 = midlines_check(ml_clean, border_line = bbox_as_line)
plot(p3, col = "GRAY")
plot(ml_check3$geometry, col = ml_check3$removed_flag2, add = TRUE)

}
