% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/midlines_refine.R
\name{midlines_check}
\alias{midlines_check}
\title{Checks removed midlines to identify wrongly flagged segments}
\usage{
midlines_check(x, n_removed = NULL, length = NULL, border_line = NULL)
}
\arguments{
\item{x}{an sf linestring collection. Intended to be passed from the output of \code{\link{midlines_clean}}}

\item{n_removed}{a contiguous group of n_removed or more line segments will be un-flagged}

\item{length}{a contiguous group of line segment of greater than specified length will be un-flagged}

\item{border_line}{an sf linestring forming the exterior border of the area of interest (see below). A contiguous group of removed lines intersecting with this line will be un-flagged}
}
\description{
Polygon midlines estimated by Voronoi tessellation can result in unwanted side branches that need to be removed. Following the flagging of potentially unwanted line segments using \code{\link{midlines_clean}}, this function can be used to filter unwanted line segments from those wrongly flagged. In reality it creates another flag variable (flagged2!), which duplicates the original flagged variable but unflags those deemed to be wrongly flagged.
}
\details{
This function is intended to take the output of \code{\link{midlines_clean}}. The unwanted side branches are usually short relative to the desired midlines and so longer groups of line segments are identified as being wrongly flagged. The threshold above which lines are unflagged can be specified as a number of line segments (with the \code{n_removed} option) or a length in \href{https://r-quantities.github.io/units/}{Units} (\code{length} option).

The \code{border_line} option can be used along with the option of the same name in \code{\link{midlines_draw}} and \code{\link{midlines_clean}} if an sf linestring specifying an area of interest is available. This ensures flagged line segments which comprise part of a contiguous group intersecting the specified border_line will be un-flagged.
}
\examples{
library(sf)
p1 = st_buffer(st_linestring(matrix(c(0,0,30,0),ncol=2, byrow=TRUE) ),0.75)
plot(p1)
p2 = st_buffer(st_linestring(matrix(c(9,5,9,0,20,0,18,-4),ncol=2, byrow=TRUE) ),0.75)
plot(p2, add = TRUE)
p3 = st_union(p1, p2)
plot(p3, col = "GRAY")

ml = midlines_draw(p3, dfMaxLength = 1)
plot(ml$geometry, add = TRUE)

ml_clean = midlines_clean(ml, n_removed = 15)
plot(ml_clean$geometry, col = ml_clean$removed_flag, add = TRUE)

ml_check = midlines_check(ml_clean, n_removed = 10)
plot(p3, col = "GRAY")
plot(ml_check$geometry, col = ml_check$removed_flag2, add = TRUE)

ml_check2 = midlines_check(ml_clean, length = 5)
plot(p3, col = "GRAY")
plot(ml_check2$geometry, col = ml_check2$removed_flag2, add = TRUE)

bbox_as_line = st_cast(st_as_sfc(st_bbox
  (c(xmin = 0, xmax = 30, ymax = -10, ymin = 10))),"LINESTRING")
plot(bbox_as_line, add = TRUE)

ml_check3 = midlines_check(ml_clean, border_line = bbox_as_line)
plot(p3, col = "GRAY")
plot(ml_check3$geometry, col = ml_check3$removed_flag2, add = TRUE)

}
