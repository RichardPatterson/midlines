% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/midlines_functions.R
\name{midlines_clean}
\alias{midlines_clean}
\title{Aims to identify extraneous lines and the desired midlines}
\usage{
midlines_clean(x, n_removed = 1, border_line = NULL)
}
\arguments{
\item{x}{Simple features collection. Intended for use with the output from \code{\link{midlines_draw}}}

\item{n_removed}{specified the number of cycles of line removal}

\item{border_line}{an sf linestring forming the exterior border of the area of interest (see below)}
}
\description{
Intended for use following \code{\link{midlines_draw}} which uses Voronoi tessellation to estimate polygon midlines. The Voronoi tessellation results in extraneous lines, in addition to the intended midlines. This function aims to identify those lines.
}
\details{
Extraneous lines are often short dead-ends protruding from the intended midlines. This function identifies these lines by identifying line ends and flagging them (with the addition of a 'flagged' variable). The process can iterate through several cycles of line end identification with the number of cycles specified by the option n_removed. It is likely that some of the intended midlines will also be flagged, at their ends. All lines are returned so that the user can examine which lines have been flagged. If necessary, all lines can then be passed to \code{\link{midlines_check}} to unflag some line wrong flagged as extraneous. Depending on the specific use, it may be best to use this function (\code{\link{midlines_check}}) more than once.

The border_lines option prevents lines being flagged if they intersect with a boarder defined by an sf linestring. This might be useful if the border intersects with the extremities of the desired midlines to prevent their being flagged for removal.
}
\examples{
library(sf)
# 1
poly = st_buffer(st_linestring(matrix(c(0,0,10,0,10,10,0,10,0,0),ncol=2, byrow=TRUE) ),0.75)
plot(poly, col = "GRAY")

ml = midlines_draw(poly, dfMaxLength = 1)
plot(ml$geometry, add = TRUE)

ml_clean = midlines_clean(ml)
plot(ml_clean$geometry, col = ml_clean$removed_flag, add = TRUE)

#2
p1 = st_buffer(st_linestring(matrix(c(0,0,30,0),ncol=2, byrow=TRUE) ),0.75)
plot(p1)
p2 = st_buffer(st_linestring(matrix(c(9,5,9,0,20,0,18,-4),ncol=2, byrow=TRUE) ),0.75)
plot(p2, add = TRUE)
p3 = st_union(p1, p2)
plot(p3, col = "GRAY")

bbox_as_line = st_cast(st_as_sfc(st_bbox
  (c(xmin = 0, xmax = 30, ymax = -10, ymin = 10))),"LINESTRING")
plot(bbox_as_line, add = TRUE)

ml = midlines_draw(p3, dfMaxLength = 1)
plot(ml$geometry, add = TRUE)

ml_clean = midlines_clean(ml, n_removed = 10)
plot(ml_clean$geometry, col = ml_clean$removed_flag, add = TRUE)

ml_clean2 = midlines_clean(ml, n_removed = 10, border_line = bbox_as_line)
plot(p3, col = "GRAY")
plot(ml_clean2$geometry, col = ml_clean2$removed_flag, add = TRUE)

}
